package SalesReport; 

//import required java libraries
import java.io.*;
import java.util.*; //this import is to use data structures like Map and list
import java.nio.file.*;

public class Main { //the program it will star in this part of public class
    public static void main(String[] args) {
        generateSellerSalesReportCSV(); //this will be the method to generate the report
    }

    //this method it will let us have the information of the sellers (sales, total organized) in the CSV file
    public static void generateSellerSalesReportCSV() {
        //this map it will read the prices, in this case we will use the product ID and prince
        Map<String, Double> productPrices = new HashMap<>();
        // this map it will the names the products, in this case use the product ID and name
        // this it willl use for to create other file with more information about every seller
        Map<String, String> productNames = new HashMap<>();

        //this part it will try to review the product information that is listed on the .txt files generated by the class "GenerateInfoFiles"
        try (BufferedReader br = new BufferedReader(new FileReader("data_output/productsFile.txt"))) {
            String line;
            while ((line = br.readLine()) != null) { //review the file line over line
                String[] parts = line.split(";"); //this part it will divide the information using ; as it says on the homework
                String id = parts[0]; //this will organize the product ID in the first field
                String productName = parts[1]; // this will organize the product ID in the second field 
                double price = Double.parseDouble(parts[2]); //this will organize the total price in the 3 field
                productPrices.put(id, price); //this part of the code ir will add product and price
                productNames.put(id, productName); // here it will add product ID and name in the map 
            }
        } catch (IOException e) { //If we have an error reading the .txt it will run this validation
            System.out.println("Error reading productsFile.txt: " + e.getMessage());
            return; 
        }

        //this map it will put the seller name validating the document ID
        Map<String, String> sellers = new HashMap<>();
        try (BufferedReader br = new BufferedReader(new FileReader("data_output/infoSellers.txt"))) {
            String line;
            while ((line = br.readLine()) != null) { //review the file line over line
                String[] parts = line.split(";"); //this part it will divide the information using ; as it says on the homework
                String documentId = parts[1]; //this will organize the seller ID in the second field
                String fullName = parts[2] + " " + parts[3]; //will put the full name
                sellers.put(documentId, fullName); //save the map ID = name + name
            }
        } catch (IOException e) { //If we have an error reading the .txt it will run this validation
            System.out.println("Error reading infoSellers.txt: " + e.getMessage());
            return; 
        }

        //this map it will be creating to sum the total seller information. To get how much of sales does he have
        Map<String, Double> sellerRevenue = new HashMap<>();
        // this map it will be creating to sum the seller information with list for products sold 
        Map<String, List<String>> sellerSales = new HashMap<>();


        //loop in all salesMen_X.txt files in the folder data_output
        File folder = new File("data_output"); //check on the main folder where we organized the information
        File[] files = folder.listFiles(); //review all the files that are listed

        if (files != null) { //validator if the folder is not empty
            for (File file : files) { //for each file in the folder
                if (file.getName().startsWith("salesMen_")) { //this if it will process only sales files not the others
                    try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                        String documentLine = br.readLine(); //in the first line it will be the seller info / the document
                        String documentId = documentLine.split(";")[1]; //it will extract the document Id
                        String sellerName = sellers.get(documentId); //validate the seller name based on the id
                        
                        if (sellerName == null) {
                            continue; //if it does not found the seller it will skip the seller info
                        }

                        String line;
                        double total = 0.0; //this part it will complete the sum up of sales
                        List<String> productsSold = new ArrayList<>(); // is added within another list because there are several products sold per seller

                        while ((line = br.readLine()) != null) { //this part it will read the product sales
                            String[] parts = line.split(";"); //this part it will split the info
                            String productId = parts[0]; //product id 
                            int quantity = Integer.parseInt(parts[1]); //total of products sold
                            double price = productPrices.getOrDefault(productId, 0.0); //cost
                            String nameProduct = productNames.get(productId); // here it wil bring the value of the map, that is name
                            total += quantity * price; //add subtotal to total
                            
                            productsSold.add(String.format("%s;%s;%s,%s", productId, nameProduct, quantity, price));
                        }

                        //update seller's total revenue (add to previous if exists)
                        sellerRevenue.put(sellerName,
                                sellerRevenue.getOrDefault(sellerName, 0.0) + total);
                        
                        // Here Here we send the sales data and the name of each seller at map
                        sellerSales.put(sellerName, productsSold);

                    } catch (IOException e) {
                        System.out.println("Error reading sales file: " + file.getName());
                    }
                }
            }
        }


    
        //this part of the map it will allow us to organize the seller total sold from highest to lowest
        List<Map.Entry<String, Double>> sortedList = new ArrayList<>(sellerRevenue.entrySet());
        sortedList.sort((a, b) -> Double.compare(b.getValue(), a.getValue())); // Sort descending
        
        //write the information organized in the CSV file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("data_output/seller_sales_report.csv"))) {
            for (Map.Entry<String, Double> entry : sortedList) { //loop on the organized information from sellers
                String line = entry.getKey() + ";" + String.format("%.2f", entry.getValue()); //the format that was set up in this case was name;amount
                writer.write(line); //write the information
                writer.newLine(); //move to next line
            }
            System.out.println("Report generated correclty: seller_sales_report.csv");
        } catch (IOException e) { //review the information and if found an error print error message
            System.out.println("Error writing seller_sales_report.csv: " + e.getMessage());
        }
        
        
        // In this part, the CSV will be written for each seller
        for (Map.Entry<String, List<String>> entry : sellerSales.entrySet()) {  //here we declare a variable in which the map will be iterated thanks to the EntrySet method
            String sellerName = entry.getKey(); // Here you get the keys within the map sellerSales
            List<String> products = entry.getValue(); // here you will get the value within the map
            String path = "data_output/seller_" + sellerName.replaceAll(" ", "_") + ".csv"; // The file name that will be created with each seller is created
            
            // write the data in the file using the libraries of buffer
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(path))) {
                writer.write(sellerName);  // write the name for each seller
                writer.newLine();
                for (String product : products) { // loop to write the products that each one sold until the list is finalized
                writer.write(product); // write the products 
                writer.newLine();  
                }
                    
            } catch (IOException e) { //review the information and if found an error print error message
            System.out.println("Error writing file for seller "+ sellerName +':'+ e.getMessage());
           }
        }
        
    }
}
